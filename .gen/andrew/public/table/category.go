//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Category = newCategoryTable("public", "category", "")

type categoryTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Name          postgres.ColumnString
	ParentID      postgres.ColumnInteger
	Description   postgres.ColumnString
	ImageID       postgres.ColumnInteger
	CreatorUserID postgres.ColumnInteger
	CreatedAt     postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CategoryTable struct {
	categoryTable

	EXCLUDED categoryTable
}

// AS creates new CategoryTable with assigned alias
func (a CategoryTable) AS(alias string) *CategoryTable {
	return newCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CategoryTable with assigned schema name
func (a CategoryTable) FromSchema(schemaName string) *CategoryTable {
	return newCategoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CategoryTable with assigned table prefix
func (a CategoryTable) WithPrefix(prefix string) *CategoryTable {
	return newCategoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CategoryTable with assigned table suffix
func (a CategoryTable) WithSuffix(suffix string) *CategoryTable {
	return newCategoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCategoryTable(schemaName, tableName, alias string) *CategoryTable {
	return &CategoryTable{
		categoryTable: newCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCategoryTableImpl("", "excluded", ""),
	}
}

func newCategoryTableImpl(schemaName, tableName, alias string) categoryTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		NameColumn          = postgres.StringColumn("name")
		ParentIDColumn      = postgres.IntegerColumn("parent_id")
		DescriptionColumn   = postgres.StringColumn("description")
		ImageIDColumn       = postgres.IntegerColumn("image_id")
		CreatorUserIDColumn = postgres.IntegerColumn("creator_user_id")
		CreatedAtColumn     = postgres.DateColumn("created_at")
		allColumns          = postgres.ColumnList{IDColumn, NameColumn, ParentIDColumn, DescriptionColumn, ImageIDColumn, CreatorUserIDColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{NameColumn, ParentIDColumn, DescriptionColumn, ImageIDColumn, CreatorUserIDColumn, CreatedAtColumn}
	)

	return categoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		ParentID:      ParentIDColumn,
		Description:   DescriptionColumn,
		ImageID:       ImageIDColumn,
		CreatorUserID: CreatorUserIDColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
