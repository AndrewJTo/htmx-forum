//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Post = newPostTable("public", "post", "")

type postTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	ThreadID      postgres.ColumnInteger
	CreatorUserID postgres.ColumnInteger
	ImageID       postgres.ColumnInteger
	Content       postgres.ColumnString
	CreatedAt     postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PostTable struct {
	postTable

	EXCLUDED postTable
}

// AS creates new PostTable with assigned alias
func (a PostTable) AS(alias string) *PostTable {
	return newPostTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PostTable with assigned schema name
func (a PostTable) FromSchema(schemaName string) *PostTable {
	return newPostTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PostTable with assigned table prefix
func (a PostTable) WithPrefix(prefix string) *PostTable {
	return newPostTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PostTable with assigned table suffix
func (a PostTable) WithSuffix(suffix string) *PostTable {
	return newPostTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPostTable(schemaName, tableName, alias string) *PostTable {
	return &PostTable{
		postTable: newPostTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newPostTableImpl("", "excluded", ""),
	}
}

func newPostTableImpl(schemaName, tableName, alias string) postTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		ThreadIDColumn      = postgres.IntegerColumn("thread_id")
		CreatorUserIDColumn = postgres.IntegerColumn("creator_user_id")
		ImageIDColumn       = postgres.IntegerColumn("image_id")
		ContentColumn       = postgres.StringColumn("content")
		CreatedAtColumn     = postgres.DateColumn("created_at")
		allColumns          = postgres.ColumnList{IDColumn, ThreadIDColumn, CreatorUserIDColumn, ImageIDColumn, ContentColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{ThreadIDColumn, CreatorUserIDColumn, ImageIDColumn, ContentColumn, CreatedAtColumn}
	)

	return postTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		ThreadID:      ThreadIDColumn,
		CreatorUserID: CreatorUserIDColumn,
		ImageID:       ImageIDColumn,
		Content:       ContentColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
